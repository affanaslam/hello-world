// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents a String object. Implements the String type.
 */
class String {

    field Array str_arr; 
    field int length_i; 
    field int maxLength_i;

    /** Constructs a new empty String with a maximum length of maxLength. */
    constructor String new(int maxLength) {

        let maxLength_i = maxLength;
        let length_i = 0;
        if (maxLength > 0){
            let str_arr = Array.new(maxLength_i);
        }

        return this;

    }

    /** De-allocates the string and frees its space. */
    method void dispose() {
        do Memory.deAlloc(this);
        return ;
    }

    /** Returns the current length of this String. */
    method int length() {
        return length_i;
    }

    /** Returns the character at location j. */
    method char charAt(int j) {

        return str_arr[j];

    }

    /** Sets the j'th character of this string to be c. */
    method void setCharAt(int j, char c) {

        let str_arr[j] = c;
        return;
    }

    /** Appends the character c to the end of this String.
     *  Returns this string as the return value. */
    method String appendChar(char c) {

        let str_arr[length_i] = c;
        let length_i = length_i + 1; //increment
        return this;


    }

    /** Erases the last character from this String. */
    method void eraseLastChar() {

        let length_i = length_i - 1; //decrement
        return;


    }

    /** Returns the integer value of this String until the first non
     *  numeric character. */
    method int intValue() {

        var int v; 
        var int i;  
        var boolean ind; 

        let i = 0; 
        let v = 0; 

        if (str_arr[0] = 45){ //if the first index is negative

            let ind = true; 
            let i = i + 1;


        }

        while (i < str_arr){

            let v = v * 10 + str_arr[i] - 48;
            let i = i + 1;  
        }

        if (ind){

            return -v;
        }

        else {

           return v; 
        }



    }

        method void setInt(int number) {
        



        let length_i = 0;   
        
        if( number < 0 ) {
            let number = -number;
            do appendChar(45);     
        }
        
        do set_int_rec(number);
        return;
    }

    method void set_int_rec(int number) { // 10


        var int q;
        var int mod;
        var char c;

        
        let q = number / 10; // 10/10 = 1
        let mod = number - (q*10); // 10 - (1*10) = 0
        let c = mod + 48;// 0 + 48; c=48
        
        if( number < 10 ) { 
            do appendChar(c);
        }
        else {
            do set_int_rec(q);
            do appendChar(c);
        }
        return;
    }
    

    

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
